1) Lottery - write log file  <<< EVTL. WEGLASSEN

import random as rd

def get_numbers(n, lim=49):
	numbers = []
	while len(numbers) < 6:
		k = rd.randint(1, lim) 
		if k not in numbers:
			numbers.append(k)
	return sorted(numbers)

def check_hits(guess, numbers):
	hits = 0
	for i in guess:
		if i in numbers:
			hits = hits +1
	return hits

guess = [1,2,3,4,5,6]
filename = 'lotterylog.txt'

logfile = open(filename, 'w')

i = 0
while True:
	i = i +1
	numbers = get_numbers(6)
	r = check_hits(guess,numbers)
	line = str(i) + '\t' + str(r) + ':' + str(numbers) + '\n'
	logfile.write(line)

	if r >= 3:
		break

logfile.write(str(guess)+'\n')
logfile.close()

--------------------------------------------------------------------------------

1) Dateistruktur entwerfen für Edelmetall Ankauf/Verkauf - Datei aus Programm schreiben
mit Print mit Datenstruktur

--------------------------------------------------------------------------------

2) Currency Exchange - read rates from file


# data of currencies and rates
currencies = [] #'EUR','USD',1.12,'USD','EUR',0.91,'YEN','GBP',0.0051]

file_name = 'exchange_rates.txt'    # EUR;USD;1.12   

rate_file = open(file_name, 'r+')

while True:
	line = rate_file.readline()
	if line == '':
		break
	data = line.split(';')
	src = data[0]
	dest = data[1]
	rate = float(data[2])
	currencies.append(src)
	currencies.append(dest)
	currencies.append(rate)

rate_file.close()

# -------

src = input('From what currency:')
dest = input('To what currency:')

i=0     # list index
# loop to loock up the required rate and to perform the calculation
while i<len(currencies):
	if src == currencies[i] and dest == currencies[i+1]:    # currencies found?
		rate = currencies[i+2]                              # yes: get rate
		amount = float(input('Amount:'))                    #      ask for amount
		exchange = amount*rate                              #      calc. exchange
		print('You will get:',exchange,dest)                #      print result
		break                                               #      break loop
	i=i+3                                                   # no:  increment index

if i>=len(currencies):                      # currencies not found
	print('This is not possible.')          #     print message

-----------------------------------------------------------------<<<<<<<<<<<<<<<

3) ToDo-List - read/write file
todo = []

# ----- read file -----
file_name = 'todo_list.txt'    

todo_file = open(file_name, 'r')

while True:
	line = todo_file.readline()
	line = line.strip('\n')
	if line == '':
		break
	todo.append(line)

todo_file.close()

select = ''
while select != '0':
	print()
	print('1: add task  2: remove top task  0: end program')
	select = input('your choice: ')
	
	if select == '1':
		task = input('New task (Prio: Note): ')
		todo.append(task)
		todo.sort()
		print(todo)
	elif select == '2':
		todo.pop(0)
		print(todo)

# ----- write file ------
todo_file = open(file_name, 'w')
for task in todo:
	todo_file.write(task+'\n')
todo_file.close()

print('program ended')
-----------------------------------------------------------------<<<<<<<<<<<<<<<
4) GPS - read track file

# the GPS track data as a sequence of track points name,lon,lat,name,lon,lat,...
track = [] #'Airport', 13.7652, 51.1306, 'Main Station', 13.7303, 51.0408, 'University', 13.7351, 51.0372, 'Blue Wonder', 13.8095, 51.0533]

# ----- read track file -----

file_name = 'gps_track.txt'    # EUR;USD;1.12   

track_file = open(file_name, 'r')

while True:
	line = track_file.readline()
	if line == '':
		break
	data = line.split(';')
	location = data[0]
	lon = float(data[1])
	lat = float(data[2])
	track.append(location)
	track.append(lon)
	track.append(lat)

track_file.close()

print('*** Length of a GPS track ***')

LON_KM = 71.5                   # avg. width of 1° longitude in Germany
LAT_KM = 111.3                  # avg. width of 1° latitude in Germany
length = 0                      # length of the track
pos=0                           # track index

loc1 = track[pos*3]             # name of track point 1
lon1 = track[pos*3+1]           # longitude of track point 1
lat1 = track[pos*3+2]           # latitude of track point 1
pos = pos+1

while pos*3 < len(track):                    # loop over all track points
	loc2 = track[pos*3]                      # name of next track point
	lon2 = track[pos*3+1]                    # longitude of next track point
	lat2 = track[pos*3+2]                    # latitude of next track point

	dx = LON_KM * (lon1 - lon2)
	dy = LAT_KM * (lat1 - lat2)
	distance = (dx*dx + dy*dy) **0.5         # distance between track point
	
	length = length + distance               # total length

	print(loc1,'>', loc2,':',distance,'km')  # print track point names and distance

	pos = pos+1                              # increment index
	loc1 = loc2                              # last location = current location
	lon1 = lon2                              # last longitude = current longitude
	lat1 = lat2                              # last latitude = current latitude

print('Total distance:',length,'km')         # finally: print total track length

-----------------------------------------------------------------<<<<<<<<<<<<<<<
5) Freier Fall - write logfile    1-files

# 2m luftleerer Glaszylinder - highspeed disance-sensor - feder im freien fall

g = 9.81
s = 0.0
t = 0.0
dT = 0.05

file_name = 'free_fall.txt'
log_file = open(file_name, 'w')

while s<2.0:
	v = g * t
	s = 0.5*g*t*t
	line = str(t)+';'+str(v)+';'+str(s)+'\n'
	log_file.write(line)
	t = t + dT

log_file.close()

-------------------------------------------------------------------<<<<<<<<<<<<<

6) Freier Fall - read log file ... imitation task für ähnliches Datenlogfile

# 2m luftleerer Glaszylinder - highspeed ultra-schall-sensor - feder im freien fall
import matplotlib.pyplot as plt

file_name = 'free_fall.txt'
log_file = open(file_name, 'r')

data_log = []

while True:
	line = log_file.readline()
	if line == '':
		break
	data = line.split(';')
	for item in data:
		item = float(item)
		data_log.append(item)

log_file.close()
# --- plot chart ---
t = data_log[0::3]
s = data_log[2::3]

plt.plot(t, s)  # Plot the chart
plt.show()  # display

---------------------------------------------------------------------<<<<<<<<<<<

7) Birthday list read filtered for specific day      1-file
... imitation task for Phone number or E-mail adress

file_name = 'birthdays.txt'
birthday_file = open(file_name, 'r')

search_date = input('Requested date:')

while True:
	line = birthday_file.readline()
	if line == '':
		break
	line = line.strip()
	data = line.split('\t')
	if data[1] == search_date:
		print(line)

birthday_file.close()

----------------------------------------------------------------------<<<<<<<<<<
8) Aphorism ... read and daily greeting         1-file

# https://gist.github.com/robatron/a66acc0eed3835119817#file-quotes-txt

import random as rd

file_name = 'quotes.txt'
max_lines = 99
quotes_file = open(file_name, 'r')

line_no = rd.randint(1,max_lines)

i=0
while i<max_lines:
	i=i+1
	line = quotes_file.readline()
	if line == '':
		break
	if i == line_no:
		print(line)

quotes_file.close()

----------------------------------------------------------------------<<<<<<<<<<

9) Chart plot config file ... completion task     2-file

    ggf. .... auch noch eine einfach Version ohne Datenstruktur entwickeln

import matplotlib.pyplot as plt

file_name = 'demoplot.cfg'
cfg_file = open(file_name, 'r')
cfg_data = {}

while True:
	line = cfg_file.readline()
	line = line.strip()
	if line == '':
		break
	key, value = line.split(':')
	cfg_data[key] = value.strip()	


cfg_file.close()

val = cfg_data.get('x-data')
if val == None:
	print('Missing x-values')
else:
	num_values = []
	val = val.split(' ')
	for v in val:
		v = float(v)
		num_values.append(v)		
	cfg_data['x-data'] = num_values
	print('x-values:', num_values)

val = cfg_data.get('y-data')
if val == None:
	print('Missing y-values')
else:
	num_values = []
	val = val.split(' ')
	for v in val:
		v = float(v)
		num_values.append(v)		
	cfg_data['y-data'] = num_values
	print('y-values:', num_values)

title = cfg_data.get('title')
xlabel = cfg_data.get('x-label')
ylabel = cfg_data.get('y-label')
x = cfg_data.get('x-data')
y = cfg_data.get('y-data')
plt.plot(x, y)  # Plot the chart
plt.xlabel(xlabel)  # add X-axis label
plt.ylabel(ylabel)  # add Y-axis label
plt.title(title)  # add title
plt.show()  # display

--------------------------------------------------------------------<<<<<<<<<<<<

10) Slide show config file img-file, text line, info line , delay     1-file

import matplotlib.pyplot as plt
import matplotlib.image as mpimg

file_name = 'slides.cfg'
cfg_file = open(file_name, 'r')

while True:
	img_file_name = cfg_file.readline()
	if img_file_name == '':
		break
	img_file_name = img_file_name.strip()
	message = cfg_file.readline()
	message = message.strip()
	license = cfg_file.readline()
	license = license.strip()
	delay = cfg_file.readline()
	delay = int(delay.strip())

	img = mpimg.imread(img_file_name)

	plt.rcParams['toolbar'] = 'None'
	plt.axis('off')
	note = message+"\n"+license
	plt.title(note, fontsize=10)
	plt.imshow(img)
	plt.show(block=False)
	plt.pause(delay)
	plt.close()

cfg_file.close()

--------------------------------------------------------------------<<<<<<<<<<<<


file_name = 'MyEvent.txt'
event_file = open(file_name, 'r')             # open the text file 

while True:                                 # loop
    line = event_file.readline()     # read image file name
    line = line.strip()                     # remove line break 
    if line == '':                 # empty line -> stop reading
        break
    print(line)

event_file.close()

print()
add_data = input('Enter more guests (y/n)?')
if add_data == 'y':
    event_file = open(file_name, 'a')             # open the text file 
    while True:
        info = input('Guest information: ')
        if info == '':
            break
        event_file.write(info+'\n')

    event_file.close()

--------------------------------------------------------------------<<<<<<<<<<<<
