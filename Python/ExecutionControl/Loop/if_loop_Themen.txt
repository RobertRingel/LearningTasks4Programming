https://tabletomarkdown.com/convert-spreadsheet-to-markdown/


Loop-Anweisungen
============================

1) aus beliebiger Anzahl Zahlen die Größe und die kleinste bestimmen
...............worked_out_example
-----------------------------------------------------------------
# aus beliebiger Anzahl Zahlen die Größe und die kleinste bestimmen

mini = 9999999
maxi = -999999

print('Enter some numbers in the range 1 ... 1000')
while True:
	number = int(input('Number:'))
	if number<0 or number>1000:
		break
	if number < mini:
		mini = number
	elif number > maxi:
		maxi = number

print('The biggest number was:',maxi)
print('The smallest number was:',mini)


2) arithmet. Mittel aus n Zahlen berechnen    ... completion task 
---------------------------------------
# arithmet. Mittel aus n Zahlen berechnen

n = int(input('How many values will be given?'))
i = 0
total = 0

while i<n:
	print('Enter Number',i+1)
	number = int(input('Number:'))
	total = total + number
	i = i+1

avg = total/n                               # --- complete
print('The average value is:',avg)          # --- complete


3) aritmet. Mittel aus unbekannter Anzahl Zahlen berechnen .... completion task ... break einbauen
-------------------------------------------------------
# aritmet. Mittel aus unbekannter Anzahl Zahlen berechnen

print('*** Calculate the average of numbers greate 0 ***')
i = 0
total = 0

while True:
	print('Enter Number >0 (0=end)')
	number = int(input('Number:'))
	if number>0:
		total = total + number
		i = i+1
	else:
		break

avg = total/i
print('The average value is:',avg)





4) Folge von Funktionswerten berechnen   ....reverse task
-----------------------------------
# Folge von Funktionswerten berechnen

x = float(input('x-Start:'))
end = float(input('x-End:'))
step = float(input('step:'))

while x<end:
	y = x**2+2*x+3
	print('x:',x,'y:',y)
	x = x + step
	
	
	

5) non-specific-goal: ... while - Wiederholung mit Schrittweite



6) Gleitender Mittelwert    ... worked-out-example ... kommentieren
-----------------------------------------
# Calculate the moving average
# ----------------------------

# initialize variables to zero
z3=0
z2=0
z1=0

# loop to enter numbers and calculate moving average
while True:
    z = int(input("Number:"))    # get an integer value
    if z<0:                      # break the loop in case of negative value
        break
    # keep the last 3 values for calculation of the mvg. avg.    
    z3=z2
    z2=z1
    z1=z
    # calculate the moving avg.
    mavg = (z1+z2+z3)/3
    print(z3, z2, z1," mvg. avg.:", mavg)


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

7) Mini-Market   ... reverse task
---------------------------------------
# ---- initialize variables -------
sum_price = 0.0      # total price
sum_vat = 0.0        # total VAT

# ---- loop to enter user data and cumulate values -----
while True:
    name = input("Product: ")                 # enter product name as string
    if name =="":
        break
    
    price = float(input("Price: "))           # enter price as float
    pcs = int(input("Pieces: "))              # enter pieces as integer
    vat = float(input("VAT: "))                # enter VAT as float
    
    sum_price = sum_price + price*pcs           # cumulate prices
    sum_vat = sum_vat + price*pcs*vat/100.0     # cumulate VAT
    
    # print cumulated values
    print(sum_price, "EUR plus ", sum_vat, "EUR VAT \n")

print("The end :-)")



8) --------------------- conventional task ------------------
# Monthly Balance over the year

total = 0.0
month = 0

while month < 12:
	month = month +1
	print('Month:',month)
	earn = float(input('Earnings [EUR]: '))
	exp = float(input('Expenses [EUR]: '))
	total = total + earn - exp
	print(total)

print('Outcome per year [EUR]:', total)

9) Imitation task zu monthly balance: Besucherzählung am Eingang einer Ausstellung 


10) -------- completion task: while-True-Datencheck ----------	
# Monthly Balance over the year

total = 0.0
month = 0

while month < 12:
	month = month +1
	print('Month:',month)
	while True:
		earn = float(input('Earnings [EUR]: '))
		exp = float(input('Expenses [EUR]: '))
		if earn>=0.0 and exp>=0.0:
			break
		else:
			print('Correct your input!')
	total = total + earn - exp
	print(total)

print('Outcome per year [EUR]:', total)



11) non-specific-goal: ... while True und spezifisches Abbruchkriterium für break



12) Wegekette-GPS     - conventional task
-----------------------------------------
# GPS-Track
AVG_LON = 71.5
AVG_LAT = 111.3

print('*** Length of a GPS-Track ***')

track = 0.0
n = 0


print('Start point:')
lon1 = float(input('Point 1 - Longitude: '))
lat1 = float(input('Point 1 - Latitude : '))

while True:
	n = n +1
	print('Track point no.:',n)
	lon2 = float(input('Point 2 - Longitude: '))
	lat2 = float(input('Point 2 - Latitude : '))

	if lon2>1000 or lat2>1000:
		break

	dx = AVG_LON * (lon1-lon2)
	dy = AVG_LAT * (lat1-lat2)
	distance = (dx*dx + dy*dy) **0.5
	track = track + distance

	print('Distance [km]:', distance)
	print('Track [km]   :', track)
	print()

	lon1 = lon2
	lat1 = lat2

print('Program finished.')


